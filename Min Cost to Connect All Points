class Solution {
public:
    int minCostConnectPoints(vector<vector<int>>& points) {
        int n = points.size();

        priority_queue<pair<int,int>,vector<pair<int,int>>,greater<pair<int,int>>> pq;

        pq.push({0,0});

        vector<int> vis(n,0);
      int minCost = 0;

        while(!pq.empty()){
          auto it = pq.top();
          pq.pop();
          int curNode = it.second;
          int wt = it.first;

          if(vis[curNode]) continue;

          vis[curNode] =1 ;
          minCost += wt;

          for (int nextNode = 0; nextNode < n; nextNode++) {
            if(!vis[nextNode]){
            int nextWeight = abs(points[curNode][0] - points[nextNode][0]) + abs(points[curNode][1] - points[nextNode][1]);

            pq.push({nextWeight, nextNode});
            }
          }
        }

        return minCost;
    }
};
