// dfs TC:- O(n) SC:- O(h)
class Solution {
public:

  void dfs(TreeNode* node, int maxi, int &cnt){
    if(!node) return;
     if(node->val >= maxi) cnt++;
    maxi = max(maxi, node->val);
     dfs(node->left, maxi, cnt);
     dfs(node->right, maxi, cnt);
  }

    int goodNodes(TreeNode* root) {
        int cnt = 0;
        dfs(root, INT_MIN, cnt);
        return cnt;
    }
};

// bfs 

class Solution {
public:

    int goodNodes(TreeNode* root) {
        if(!root) return 0;
        queue<pair<TreeNode*,int>> q;
        q.push({root, INT_MIN});

        int cnt = 0;

        while(!q.empty()){
            auto [node, maxi] = q.front();
            q.pop();

            if(node->val >= maxi) cnt++;

            int newMaxi = max(maxi, node->val);

            if(node->left) q.push({node->left, newMaxi});
            if(node->right) q.push({node->right, newMaxi});
        }

        return cnt;
    }
};
